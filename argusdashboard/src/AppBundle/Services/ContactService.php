<?php
/**
 * Contact Service
 *
 * @author FranÃ§ois Cardinaux
 */

namespace AppBundle\Services;

use AppBundle\Repository\RepositoryInterface;
use AppBundle\Repository\SesDashboardContactRepository;
use Doctrine\ORM\EntityManager;
use AppBundle\Entity\SesDashboardContact;
use Symfony\Bridge\Monolog\Logger;

class ContactService extends BaseRepositoryService
{
    /**
     * @var SesDashboardContactRepository
     */
    private $contactRepository;

    public function __construct(Logger $logger, SesDashboardContactRepository $contactRepository)
    {
        parent::__construct($logger);
        $this->contactRepository = $contactRepository;
    }

    /**
     * Get an array containing all contacts
     *
     * @return array
     */
    public function getAllContactsArray()
    {
        return $this->contactRepository->getAllContactsArray();
    }

    /**
     * @param mixed $id
     * @param null $lockMode
     * @param null $lockVersion
     * @return SesDashboardContact
     */
    public function find($id, $lockMode = null, $lockVersion = null)
    {
        return parent::find($id, $lockMode, $lockVersion); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @param $contactTypeId
     * @param $siteId
     * @param null $imei
     * @param null $imei2
     * @return SesDashboardContact[]
     */
    public function findContact($id, $contactTypeId, $siteId, $imei = null, $imei2 = null) {
        return $this->contactRepository->findContact($id, $contactTypeId, $siteId, null, null);
    }

    /**
     * @param $id
     * @param $contactTypeId
     * @param $siteId
     * @param null $imei
     * @param null $imei2
     * @return SesDashboardContact[]
     */
    public function findContactWithLocations($id, $contactTypeId, $siteId, $imei = null, $imei2 = null) {
        return $this->contactRepository->findContactWithLocations($id, $contactTypeId, $siteId, null, null);
    }

    /**
     * @param $id
     * @param $contactTypeId
     * @param $siteId
     * @param null $imei
     * @param null $imei2
     * @return int[]
     */
    public function findContactIds($id, $contactTypeId, $siteId, $imei = null, $imei2 = null) {
        return $this->contactRepository->findContactIds($id, $contactTypeId, $siteId, null, null);
    }

    /**
     * @param $phoneNumber
     * @return null|SesDashboardContact
     */
    public function getByPhoneNumber($phoneNumber)
    {
        $contact = $this->contactRepository->findOneBy(array('phoneNumber' => $phoneNumber));
        return $contact ;
    }

    /**
     * Find contact by Imei
     * @param $imei
     * @return SesDashboardContact[]
     */
    public function findByImeis($imei)
    {
        $contacts = $this->contactRepository->findByImeis($imei);
        return $contacts ;
    }

    /**
     * Find contact by Imei
     * @param $imei
     * @return SesDashboardContact
     */
    public function findOneByImeis($imei)
    {
        return $this->contactRepository->findOneByImeis($imei);
    }

    /**
     * Get a query object that can be used to get a list of contacts
     *
     * @return \Doctrine\ORM\Query
     */
    public function getContactListQuery() {
        $qb = $this->contactRepository->createQueryBuilder('c');
        $qb->orderBy('c.id');
        return $qb->getQuery();
    }

    /**
     * Return All Contacts
     *
     * @return array
     */
    public function getAll()
    {
        return $this->contactRepository->findAll();
    }

    /**
     * Remove All Contacts from DB
     *
     */
    public function removeAll()
    {
        foreach ($this->getAll() as $entity) {
            $this->contactRepository->remove($entity);
        }
        $this->contactRepository->saveChanges();
    }

    /**
     * Remove a contact identified by $contactId from DB
     *
     * @param $contactId
     */
    public function remove($contactId) {
        $entity = $this->find($contactId);
        if ($entity != null){
            $this->contactRepository->remove($entity);
            $this->contactRepository->saveChanges();
        }
    }

    public function saveContacts($contacts){
        foreach ($contacts as $contact){
            $this->contactRepository->persist($contact);
        }
        $this->contactRepository->saveChanges();
    }

    /**
     * Get Array of Contact rows for CSV Export
     *
     * @return array
     */
    public function getContactForCsvExport(){
        $result = array();
        $contacts = self::getAll();

        $result[] = SesDashboardContact::getHeaderCsvRow();

        foreach($contacts as $contact){
            $result[] = $contact->getCsvRow() ;
        }

        return $result ;
    }

    public function removeImeiFromContacts($imei, $exceptedUserId=null) {
        return $this->contactRepository->removeImeiFromContacts($imei, $exceptedUserId);
    }

    public function getRepository()
    {
        return $this->contactRepository;
    }

    public function setRepository(RepositoryInterface $repository)
    {
        $this->contactRepository = $repository;
    }

}